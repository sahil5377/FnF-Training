using InsuranceApi.Data;
using InsuranceApi.DTOs;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;

namespace InsuranceApi.Services
{
    public interface IHospitalService
    {
        Task Add(HospitalDto hospitalDto);
        Task Delete(int id);
        Task<List<HospitalDto>> GetAll();
        Task<HospitalDto> GetById(int id);
        Task Update(HospitalDto hospitalDto);
    }

    public class HospitalService : IHospitalService
    {
        private readonly FnfProjectContext context;
        public HospitalService(FnfProjectContext context)
        {
            this.context = context;
        }

        public async Task<List<HospitalDto>> GetAll()
        {
            List<HospitalDto> hospitalDtos = new List<HospitalDto>();
            await foreach (var hospitalTable in context.Hospitals)
            {
                HospitalDto hospitalDto = ConvertToDto(hospitalTable);
                hospitalDtos.Add(hospitalDto);
            }
            return hospitalDtos;
        }

        public async Task Delete(int id)
        {
            var found = await context.Hospitals.FirstOrDefaultAsync((hospitalTable) => hospitalTable.HospitalId == id);
            if (found != null)
            {
                context.Hospitals.Remove(found);
                await context.SaveChangesAsync();
                return;
            }
            throw new NullReferenceException();
        }

        public async Task Add(HospitalDto hospitalDto)
        {
            Hospital hospitalTable = new Hospital();
            ConvertToTable(hospitalDto, hospitalTable);
            context.Hospitals.Add(hospitalTable);
            await context.SaveChangesAsync();
            return;
        }

        public async Task Update(HospitalDto hospitalDto)
        {
            var found = await context.Hospitals.FirstOrDefaultAsync((hospitalTable) =>
                hospitalTable.HospitalId == hospitalDto.HospitalId);
            if (found != null)
            {
                ConvertToTable(hospitalDto, found);
                await context.SaveChangesAsync();
                return;
            }
            throw new NullReferenceException();
        }

        public async Task<HospitalDto> GetById(int id)
        {
            var found = await context.Hospitals.FirstOrDefaultAsync((hospitalTable) => hospitalTable.HospitalId == id);
            if (found != null)
            {
                var hospitalDto = ConvertToDto(found);
                return hospitalDto;
            }
            throw new NullReferenceException();
        }

        private HospitalDto ConvertToDto(Hospital hospitalTable)
        {
            HospitalDto hospitalDto = new()
            {
                HospitalId = hospitalTable.HospitalId,
                Name = hospitalTable.Name,
                Address = hospitalTable.Address,
                Phone = hospitalTable.Phone,
            };
            return hospitalDto;
        }

        private void ConvertToTable(HospitalDto hospitalDto, Hospital hospitalTable)
        {
            hospitalTable.HospitalId = hospitalDto.HospitalId;
            hospitalTable.Name = hospitalDto.Name;
            hospitalTable.Address = hospitalDto.Address;
            hospitalTable.Phone = hospitalDto.Phone;
            return;
        }
    }
}

using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using WebApplication1.Models;
using WebApplication1.Services;

namespace WebApplication1.Controllers
{
    [Authorize]
    public class HospitalController : Controller
    {
        private readonly IHospitalService _hospitalService;

        public HospitalController(IHospitalService hospitalService)
        {
            _hospitalService = hospitalService;
        }

        public async Task<IActionResult> ManageHospitals()
        {
            var hospitals = await _hospitalService.GetAllHospitalsAsync();
            return View(hospitals);
        }

        [HttpPost]
        public async Task<IActionResult> AddHospital(Hospital hospital)
        {
            if (ModelState.IsValid)
            {
                await _hospitalService.AddHospitalAsync(hospital);
                return RedirectToAction("ManageHospitals");
            }
            return View("ManageHospitals", await _hospitalService.GetAllHospitalsAsync());
        }

        [HttpPost]
        public async Task<IActionResult> UpdateHospital(Hospital hospital)
        {
            if (ModelState.IsValid)
            {
                await _hospitalService.UpdateHospitalAsync(hospital);
                return RedirectToAction("ManageHospitals");
            }
            return View("ManageHospitals", await _hospitalService.GetAllHospitalsAsync());
        }

        [HttpPost]
        public async Task<IActionResult> DeleteHospital(int hospitalId)
        {
            await _hospitalService.DeleteHospitalAsync(hospitalId);
            return RedirectToAction("ManageHospitals");
        }
    }
}
Hospital MVC Controller
using System.Net.Http;
using System.Net.Http.Json;
using System.Text.Json;
using WebApplication1.Models;

namespace WebApplication1.Services
{
    public class HospitalService : IHospitalService
    {
        private readonly HttpClient _httpClient;

        public HospitalService(HttpClient httpClient)
        {
            _httpClient = httpClient;
        }

        public async Task<List<Hospital>> GetAllHospitalsAsync()
        {
            var response = await _httpClient.GetAsync("Hospital");
            response.EnsureSuccessStatusCode();

            var jsonResponse = await response.Content.ReadAsStringAsync();
            var hospitals = JsonSerializer.Deserialize<List<Hospital>>(jsonResponse, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });

            return hospitals;
        }

        public async Task<List<Hospital>>AddHospitalAsync(Hospital hospital)
        {
            var response = await _httpClient.PostAsJsonAsync("Hospital", hospital);
            response.EnsureSuccessStatusCode();
            return await response.Content.ReadFromJsonAsync<List<Hospital>>();
        }

        public async Task UpdateHospitalAsync(Hospital hospital)
        {
            var response = await _httpClient.PutAsJsonAsync($"Hospital/{hospital.HospitalId}", hospital);
            response.EnsureSuccessStatusCode();
        }

        public async Task DeleteHospitalAsync(int hospitalId)
        {
            var response = await _httpClient.DeleteAsync($"Hospital/{hospitalId}");
            response.EnsureSuccessStatusCode();
        }
    }

    public interface IHospitalService
    {
        Task<List<Hospital>> GetAllHospitalsAsync();
        Task<List<Hospital>> AddHospitalAsync(Hospital hospital);
        Task UpdateHospitalAsync(Hospital hospital);
        Task DeleteHospitalAsync(int hospitalId);
    }
}
