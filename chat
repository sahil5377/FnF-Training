using System.Net.Http;
using System.Net.Http.Json;
using System.Text.Json;
using System.Threading.Tasks;
using WebApplication1.Models;

namespace WebApplication1.Services
{
    public class AdminService : IAdminService
    {
        private readonly HttpClient _httpClient;

        public AdminService(HttpClient httpClient)
        {
            _httpClient = httpClient;
        }

        // Other methods...

        // Fetch all hospitals
        public async Task<List<Hospital>> GetAllHospitalsAsync()
        {
            var response = await _httpClient.GetAsync("api/Hospital");
            response.EnsureSuccessStatusCode();
            var jsonResponse = await response.Content.ReadAsStringAsync();
            return JsonSerializer.Deserialize<List<Hospital>>(jsonResponse, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
        }

        // Add a new hospital
        public async Task<Hospital> AddHospitalAsync(Hospital hospital)
        {
            var response = await _httpClient.PostAsJsonAsync("api/Hospital", hospital);
            response.EnsureSuccessStatusCode();
            return await response.Content.ReadFromJsonAsync<Hospital>();
        }

        // Update an existing hospital
        public async Task UpdateHospitalAsync(Hospital hospital)
        {
            var response = await _httpClient.PutAsJsonAsync($"api/Hospital/{hospital.HospitalId}", hospital);
            response.EnsureSuccessStatusCode();
        }

        // Delete a hospital
        public async Task DeleteHospitalAsync(int hospitalId)
        {
            var response = await _httpClient.DeleteAsync($"api/Hospital/{hospitalId}");
            response.EnsureSuccessStatusCode();
        }
    }

    public interface IAdminService
    {
        // Other methods...

        Task<List<Hospital>> GetAllHospitalsAsync();
        Task<Hospital> AddHospitalAsync(Hospital hospital);
        Task UpdateHospitalAsync(Hospital hospital);
        Task DeleteHospitalAsync(int hospitalId);
    }
}
