using InsuranceApi.Data;
using InsuranceApi.DTOs;
using InsuranceApi.Services;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using System.Collections.Generic;
using System.Threading.Tasks;

namespace InsuranceApi.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class PolicyHolderController : ControllerBase
    {
        private readonly IPolicyHolderService _service;

        public PolicyHolderController(IPolicyHolderService service)
        {
            _service = service;
        }

        [HttpGet]
        public async Task<IActionResult> GetAll()
        {
            List<PolicyHolderDto> policyHolderDtos = await _service.GetAll();
            return Ok(policyHolderDtos);
        }

        [HttpGet("{id}")]
        public async Task<IActionResult> GetById(int id)
        {
            try
            {
                var found = await _service.GetById(id);
                return Ok(found);
            }
            catch (NullReferenceException)
            {
                return NotFound();
            }
        }

        [HttpPost]
        public async Task<IActionResult> Add(PolicyHolderDto policyHolderDto)
        {
            await _service.Add(policyHolderDto);
            return Ok();
        }

        [HttpPut]
        public async Task<IActionResult> Update(PolicyHolderDto policyHolderDto)
        {
            try
            {
                await _service.Update(policyHolderDto);
                return Ok();
            }
            catch (NullReferenceException)
            {
                return NotFound();
            }
        }

        [HttpDelete("{id}")]
        public async Task<IActionResult> Delete(int id)
        {
            try
            {
                await _service.Delete(id);
                return Ok();
            }
            catch (NullReferenceException)
            {
                return NotFound();
            }
        }

        [HttpPut("{id}/status")]
        public async Task<IActionResult> UpdateStatus(int id, [FromBody] int status)
        {
            try
            {
                await _service.UpdateStatus(id, status);
                return Ok();
            }
            catch (NullReferenceException)
            {
                return NotFound();
            }
        }
        [HttpGet("count")]
        public async Task<ActionResult<int>> GetCustomerCount()
        {
            try
            {
                var count = await _service.GetCustomerCount();
                return Ok(count);
            }
            catch (Exception ex)
            {
                return StatusCode(StatusCodes.Status500InternalServerError, ex.Message);
            }
        }
    }
}

API Controller

using InsuranceApi.Data;
using InsuranceApi.DTOs;
using Microsoft.EntityFrameworkCore;
using System.Collections.Generic;
using System.Threading.Tasks;

namespace InsuranceApi.Services
{
    public interface IPolicyHolderService
    {
        Task Add(PolicyHolderDto policyHolderDto);
        Task Delete(int id);
        Task<List<PolicyHolderDto>> GetAll();
        Task<PolicyHolderDto> GetById(int id);
        Task<int> GetCustomerCount();
        Task Update(PolicyHolderDto policyHolderDto);
        Task UpdateStatus(int id, int status);
    }

    public class PolicyHolderService : IPolicyHolderService
    {
        private readonly FnfProjectContext context;

        public PolicyHolderService(FnfProjectContext context)
        {
            this.context = context;
        }

        public async Task<List<PolicyHolderDto>> GetAll()
        {
            List<PolicyHolderDto> policyHolderDtos = new List<PolicyHolderDto>();
            await foreach (var policyHolderTable in context.PolicyHolders)
            {
                var policyHolderDto = ConvertToDto(policyHolderTable);
                policyHolderDtos.Add(policyHolderDto);
            }
            return policyHolderDtos;
        }

        public async Task Delete(int id)
        {
            var found = await context.PolicyHolders.FirstOrDefaultAsync((policyHolderTable) =>
                policyHolderTable.PolicyHolderId == id);
            if (found != null)
            {
                context.PolicyHolders.Remove(found);
                await context.SaveChangesAsync();
                return;
            }
            throw new NullReferenceException();
        }

        public async Task Add(PolicyHolderDto policyHolderDto)
        {
            PolicyHolder policyHolderTable = new();
            ConvertToTable(policyHolderDto, policyHolderTable);
            context.PolicyHolders.Add(policyHolderTable);
            await context.SaveChangesAsync();
            return;
        }

        public async Task Update(PolicyHolderDto policyHolderDto)
        {
            var found = await context.PolicyHolders.FirstOrDefaultAsync((policyHolderTable) =>
                policyHolderTable.PolicyHolderId == policyHolderDto.PolicyHolderId);
            if (found != null)
            {
                ConvertToTable(policyHolderDto, found);
                await context.SaveChangesAsync();
                return;
            }
            throw new NullReferenceException();
        }

        public async Task<PolicyHolderDto> GetById(int id)
        {
            var found = await context.PolicyHolders.FirstOrDefaultAsync((policyHolderTable) =>
                policyHolderTable.PolicyHolderId == id);

            if (found != null)
                return ConvertToDto(found);

            throw new NullReferenceException();
        }

        public async Task UpdateStatus(int id, int status)
        {
            var found = await context.PolicyHolders.FirstOrDefaultAsync(ph => ph.PolicyHolderId == id);
            if (found != null)
            {
                found.Status = status;
                await context.SaveChangesAsync();
                return;
            }
            throw new NullReferenceException();
        }
        public async Task<int> GetCustomerCount()
        {
            return await context.PolicyHolders.CountAsync();
        }

        private PolicyHolderDto ConvertToDto(PolicyHolder policyHolderTable)
        {
            PolicyHolderDto policyHolderDto = new()
            {
                PolicyHolderId = policyHolderTable.PolicyHolderId,
                Name = policyHolderTable.Name,
                Address = policyHolderTable.Address,
                Email = policyHolderTable.Email,
                PasswordHash = policyHolderTable.PasswordHash,
                Phone = policyHolderTable.Phone,
                Status = policyHolderTable.Status,
            };
            return policyHolderDto;
        }

        private void ConvertToTable(PolicyHolderDto policyHolderDto, PolicyHolder policyHolderTable)
        {
            policyHolderTable.PolicyHolderId = policyHolderDto.PolicyHolderId;
            policyHolderTable.Name = policyHolderDto.Name;
            policyHolderTable.Address = policyHolderDto.Address;
            policyHolderTable.Email = policyHolderDto.Email;
            policyHolderTable.PasswordHash = policyHolderDto.PasswordHash;
            policyHolderTable.Phone = policyHolderDto.Phone;
            policyHolderTable.Status = policyHolderDto.Status;
            return;
        }
    }
}

API Service

using InsuranceApi.DTOs;
using Microsoft.AspNetCore.Cors;
using Microsoft.AspNetCore.Mvc;
using System.Threading.Tasks;
using WebApplication1.Services;

namespace WebApplication1.Controllers
{
    [EnableCors("AllowSpecificOrigin")]  // Ensure CORS policy is applied
    public class CustomerController : Controller
    {
        private readonly PolicyHolderService _policyHolderService;

        public CustomerController(PolicyHolderService policyHolderService)
        {
            _policyHolderService = policyHolderService;
        }

        public async Task<IActionResult> ManageCustomers()
        {
            var policyHolders = await _policyHolderService.GetPolicyHoldersAsync();
            var customerCount = await _policyHolderService.GetCustomerCountAsync();
            TempData["CustomerCount"] = customerCount;  // Pass the count to the view
            TempData.Keep("CustomerCount");
            return View(policyHolders); 
        }


        [HttpPut]
        [Route("PolicyHolder/{id}/status")]
        public async Task<IActionResult> UpdateStatus(int id, [FromBody] int status)
        {
            try
            {
                await _policyHolderService.UpdateStatusAsync(id, status);
                return Ok();
            }
            catch
            {
                return StatusCode(StatusCodes.Status500InternalServerError, "An error occurred while updating the status.");
            }
        }
    }
}
MVC Controller

using InsuranceApi.DTOs;
using System.Net.Http;
using System.Text;
using System.Text.Json;
using System.Threading.Tasks;
using System.Collections.Generic;

public class PolicyHolderService
{
    private readonly HttpClient _httpClient;

    public PolicyHolderService(HttpClient httpClient)
    {
        _httpClient = httpClient;
    }

    public async Task<List<PolicyHolderDto>> GetPolicyHoldersAsync()
    {
        string endpoint = "PolicyHolder";
        var response = await _httpClient.GetAsync(endpoint);
        response.EnsureSuccessStatusCode();

        var jsonResponse = await response.Content.ReadAsStringAsync();
        var customers = JsonSerializer.Deserialize<List<PolicyHolderDto>>(jsonResponse, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });

        return customers;
    }


    // Update this method to send status as an integer
    public async Task UpdateStatusAsync(int id, int status)
    {
        string endpoint = $"PolicyHolder/{id}/status";
        var content = new StringContent(JsonSerializer.Serialize(status), Encoding.UTF8, "application/json");

        var response = await _httpClient.PutAsync(endpoint, content);
        response.EnsureSuccessStatusCode();
    }
    public async Task<int> GetCustomerCountAsync()
    {
        var response = await _httpClient.GetAsync("PolicyHolder/count");
        response.EnsureSuccessStatusCode();
        var count = await response.Content.ReadFromJsonAsync<int>();
        return count;
    }
}

MVC Service file

@model List<InsuranceApi.DTOs.PolicyHolderDto>

@{
    ViewData["Title"] = "Manage Customers";
}

<h2 class="page-title">Manage Customers</h2>

<div class="table-responsive">
    <table class="table table-striped table-hover">
        <thead class="thead-custom">
            <tr>
                <th>Policy Holder ID</th>
                <th>Name</th>
                <th>Address</th>
                <th>Phone</th>
                <th>Email</th>
                <th>Status</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var policyHolder in Model)
            {
                <tr>
                    <td>@policyHolder.PolicyHolderId</td>
                    <td>@policyHolder.Name</td>
                    <td>@policyHolder.Address</td>
                    <td>@policyHolder.Phone</td>
                    <td>@policyHolder.Email</td>
                    <td>
                        @if (policyHolder.Status == 1)
                        {
                            <span class="status-label status-active">Active</span>
                        }
                        else
                        {
                            <span class="status-label status-blocked">Blocked</span>
                        }
                    </td>
                    <td>
                        <button class="btn toggle-button @(policyHolder.Status == 1 ? "btn-primary" : "btn-secondary")" onclick="toggleStatus(@policyHolder.PolicyHolderId, @policyHolder.Status)">
                            <span class="toggle-slider @(policyHolder.Status == 1 ? "active" : "inactive")"></span>
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

<style>
    body {
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }

    .page-title {
        font-size: 2rem;
        margin-bottom: 20px;
        color: #333;
        text-align: center;
    }

    .table-responsive {
        padding: 20px;
        border-radius: 8px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        background-color: #f9f9f9;
    }

    .thead-custom {
        background-color: #007bff;
        color: white;
    }

    .table-hover tbody tr:hover {
        background-color: #f1f1f1;
    }

    .status-label {
        padding: 5px 10px;
        border-radius: 15px;
        color: white;
        font-weight: bold;
    }

    .status-active {
        background-color: #28a745;
    }

    .status-blocked {
        background-color: #dc3545;
    }

    .toggle-button {
        position: relative;
        width: 60px;
        height: 34px;
        border: none;
        border-radius: 34px;
        cursor: pointer;
        outline: none;
        transition: background-color 0.3s ease, transform 0.3s ease;
        background-color: grey; /* Default background */
    }

    .btn-primary {
        background-color: blue;
    }

    .btn-secondary {
        background-color: grey;
    }

    .toggle-slider {
        position: absolute;
        top: 2px;
        left: 2px;
        width: 30px;
        height: 30px;
        border-radius: 50%;
        background-color: white;
        transition: transform 0.3s ease, background-color 0.3s ease;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
    }

    .toggle-button.btn-primary .toggle-slider {
        transform: translateX(26px);
        background-color: lightgreen;
    }

    .toggle-button.btn-secondary .toggle-slider {
        transform: translateX(0);
        background-color: lightcoral;
    }

    .toggle-button:hover .toggle-slider {
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);
    }
</style>

<script>
    async function toggleStatus(id, currentStatus) {
        let newStatus = currentStatus === 1 ? 0 : 1; // Assuming status is binary (active/inactive)

        const response = await fetch(`/PolicyHolder/${id}/status`, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(newStatus)
        });

        if (response.ok) {
            location.reload(); // Reload the page to reflect changes
        } else {
            alert('Failed to update status');
        }
    }
</script>

ManageCustomer.cshtml
