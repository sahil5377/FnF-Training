using InsuranceApi.Data;
using InsuranceApi.DTOs;
using InsuranceApi.Services;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;

namespace InsuranceApi.Controllers
{
    public interface IHospitalController
    {
        Task<IActionResult> Add(HospitalDto hospital);
        Task<IActionResult> Delete(int id);
        Task<IActionResult> GetAll();
        Task<IActionResult> GetById(int id);
        Task<IActionResult> Update(HospitalDto hospital);
    }

    [Route("api/[controller]")]
    [ApiController]
    public class HospitalController : ControllerBase, IHospitalController
    {
        private readonly IHospitalService service;
        public HospitalController(IHospitalService service)
        {
            this.service = service;
        }

        [HttpGet]
        public async Task<IActionResult> GetAll()
        {
            List<HospitalDto> hospitals = await service.GetAll();
            return Ok(hospitals);
        }

        [HttpDelete]
        [Route("{id}")]
        public async Task<IActionResult> Delete(int id)
        {
            try
            {
                await service.Delete(id);
                return Ok();
            }
            catch (NullReferenceException)
            {
                return NotFound();
            }
        }

        [HttpPost]
        public async Task<IActionResult> Add(HospitalDto hospital)
        {
            await service.Add(hospital);
            return Ok();
        }

        [HttpPut]
        public async Task<IActionResult> Update(HospitalDto hospital)
        {
            try
            {
                await service.Update(hospital);
                return Ok();
            }
            catch (NullReferenceException)
            {
                return NotFound();
            }
        }

        [HttpGet]
        [Route("{id}")]
        public async Task<IActionResult> GetById(int id)
        {
            try
            {
                var found = await service.GetById(id);
                return Ok(found);
            }
            catch (NullReferenceException)
            {
                return NotFound();
            }
        }
        [HttpGet("count")]
        public async Task<IActionResult> GetHospitalCount()
        {
            try
            {
                var count = await service.GetHospitalCount();
                return Ok(count);
            }
            catch (Exception ex)
            {
                return StatusCode(StatusCodes.Status500InternalServerError, ex.Message);
            }
        }
    }
}

APi Controller
using InsuranceApi.Data;
using InsuranceApi.DTOs;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;

namespace InsuranceApi.Services
{
    public interface IHospitalService
    {
        Task Add(HospitalDto hospitalDto);
        Task Delete(int id);
        Task<List<HospitalDto>> GetAll();
        Task<HospitalDto> GetById(int id);
        Task<int> GetHospitalCount();
        Task Update(HospitalDto hospitalDto);
    }

    public class HospitalService : IHospitalService
    {
        private readonly FnfProjectContext context;
        public HospitalService(FnfProjectContext context)
        {
            this.context = context;
        }

        public async Task<List<HospitalDto>> GetAll()
        {
            List<HospitalDto> hospitalDtos = new List<HospitalDto>();
            await foreach (var hospitalTable in context.Hospitals)
            {
                HospitalDto hospitalDto = ConvertToDto(hospitalTable);
                hospitalDtos.Add(hospitalDto);
            }
            return hospitalDtos;
        }

        public async Task Delete(int id)
        {
            var found = await context.Hospitals.FirstOrDefaultAsync((hospitalTable) => hospitalTable.HospitalId == id);
            if (found != null)
            {
                context.Hospitals.Remove(found);
                await context.SaveChangesAsync();
                return;
            }
            throw new NullReferenceException();
        }

        public async Task Add(HospitalDto hospitalDto)
        {
            Hospital hospitalTable = new Hospital();
            ConvertToTable(hospitalDto, hospitalTable);
            context.Hospitals.Add(hospitalTable);
            await context.SaveChangesAsync();
            return;
        }

        public async Task Update(HospitalDto hospitalDto)
        {
            var found = await context.Hospitals.FirstOrDefaultAsync((hospitalTable) =>
                hospitalTable.HospitalId == hospitalDto.HospitalId);
            if (found != null)
            {
                ConvertToTable(hospitalDto, found);
                await context.SaveChangesAsync();
                return;
            }
            throw new NullReferenceException();
        }

        public async Task<HospitalDto> GetById(int id)
        {
            var found = await context.Hospitals.FirstOrDefaultAsync((hospitalTable) => hospitalTable.HospitalId == id);
            if (found != null)
            {
                var hospitalDto = ConvertToDto(found);
                return hospitalDto;
            }
            throw new NullReferenceException();
        }

        private HospitalDto ConvertToDto(Hospital hospitalTable)
        {
            HospitalDto hospitalDto = new()
            {
                HospitalId = hospitalTable.HospitalId,
                Name = hospitalTable.Name,
                Address = hospitalTable.Address,
                Phone = hospitalTable.Phone,
            };
            return hospitalDto;
        }

        private void ConvertToTable(HospitalDto hospitalDto, Hospital hospitalTable)
        {
            hospitalTable.HospitalId = hospitalDto.HospitalId;
            hospitalTable.Name = hospitalDto.Name;
            hospitalTable.Address = hospitalDto.Address;
            hospitalTable.Phone = hospitalDto.Phone;
            return;
        }
        public async Task<int> GetHospitalCount()
        {
            return await context.Hospitals.CountAsync();
        }
    }
}

Api Service File

using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using WebApplication1.Models;
using WebApplication1.Services;

namespace WebApplication1.Controllers
{
    [Authorize]
    public class HospitalController : Controller
    {
        private readonly IHospitalService _hospitalService;

        public HospitalController(IHospitalService hospitalService)
        {
            _hospitalService = hospitalService;
        }

        public async Task<IActionResult> ManageHospitals()
        {
            var hospitals = await _hospitalService.GetAllHospitalsAsync();
            var hospitalCount = await _hospitalService.GetHospitalCountAsync();

            ViewData["HospitalCount"] = hospitalCount;  // Pass the count to the view
            return View(hospitals);
        }
        

        [HttpPost]
        public async Task<IActionResult> AddHospital(Hospital hospital)
        {
            if (ModelState.IsValid)
            {
                await _hospitalService.AddHospitalAsync(hospital);
                return RedirectToAction("ManageHospitals");
            }
            return View("ManageHospitals", await _hospitalService.GetAllHospitalsAsync());
        }

        [HttpPost]
        public async Task<IActionResult> UpdateHospital(Hospital hospital)
        {
            if (ModelState.IsValid)
            {
                await _hospitalService.UpdateHospitalAsync(hospital);
                return RedirectToAction("ManageHospitals");
            }
            return View("ManageHospitals", await _hospitalService.GetAllHospitalsAsync());
        }

        [HttpPost]
        public async Task<IActionResult> DeleteHospital(int hospitalId)
        {
            await _hospitalService.DeleteHospitalAsync(hospitalId);
            return RedirectToAction("ManageHospitals");
        }

    }
}
MVC Controller
using System.Net.Http;
using System.Net.Http.Json;
using System.Text.Json;
using WebApplication1.Models;

namespace WebApplication1.Services
{
    public class HospitalService : IHospitalService
    {
        private readonly HttpClient _httpClient;

        public HospitalService(HttpClient httpClient)
        {
            _httpClient = httpClient;
        }

        public async Task<List<Hospital>> GetAllHospitalsAsync()
        {
            var response = await _httpClient.GetAsync("Hospital");
            response.EnsureSuccessStatusCode();

            var jsonResponse = await response.Content.ReadAsStringAsync();
            var hospitals = JsonSerializer.Deserialize<List<Hospital>>(jsonResponse, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });

            return hospitals;
        }

        public async Task<List<Hospital>>AddHospitalAsync(Hospital hospital)
        {
            var response = await _httpClient.PostAsJsonAsync("Hospital", hospital);
            response.EnsureSuccessStatusCode();
            return await response.Content.ReadFromJsonAsync<List<Hospital>>();
        }

        public async Task UpdateHospitalAsync(Hospital hospital)
        {
            var response = await _httpClient.PutAsJsonAsync($"Hospital/{hospital.HospitalId}", hospital);
            response.EnsureSuccessStatusCode();
        }

        public async Task DeleteHospitalAsync(int hospitalId)
        {
            var response = await _httpClient.DeleteAsync($"Hospital/{hospitalId}");
            response.EnsureSuccessStatusCode();
        }
        public async Task<int> GetHospitalCountAsync()
        {
            var response = await _httpClient.GetAsync("Hospital/count");
            response.EnsureSuccessStatusCode();
            var count = await response.Content.ReadFromJsonAsync<int>();
            return count;

        }

    }

    public interface IHospitalService
    {
        Task<List<Hospital>> GetAllHospitalsAsync();
        Task<List<Hospital>> AddHospitalAsync(Hospital hospital);
        Task UpdateHospitalAsync(Hospital hospital);
        Task DeleteHospitalAsync(int hospitalId);
        Task<int> GetHospitalCountAsync();
    }
}
MVC Service
@* Dashboard.cshtml *@
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewData["Title"] = "Dashboard";
}

<div class="container-fluid">
    <h1 class="text-center mt-4 mb-4">Admin Dashboard</h1>
    <hr />
    <div class="row mb-4">
        <div class="col-lg-3 col-md-6">
            <div class="stat-counter card-gradient-primary mb-3 shadow-sm">
                <div class="stat-icon">
                    <i class="fas fa-file-alt"></i>
                </div>
                <div class="stat-number" data-number="1500">1500</div>
                <div class="stat-label">Total Policies</div>
            </div>
        </div>
        <div class="col-lg-3 col-md-6">
            <div class="stat-counter card-gradient-success mb-3 shadow-sm">
                <div class="stat-icon">
                    <i class="fas fa-clipboard-check"></i>
                </div>
                <div class="stat-number" data-number="200">200</div>
                <div class="stat-label">Active Claims</div>
            </div>
        </div>
        <div class="col-lg-3 col-md-6">
            <div class="stat-counter card-gradient-warning mb-3 shadow-sm">
                <div class="stat-icon">
                    <i class="fas fa-ban"></i>
                </div>
                <div class="stat-number" data-number="50">50</div>
                <div class="stat-label">Rejected Claims</div>
            </div>
        </div>
        <div class="col-lg-3 col-md-6">
            <div class="stat-counter card-gradient-danger mb-3 shadow-sm">
                <div class="stat-icon">
                    <i class="fas fa-hospital"></i>
                </div>
                <div class="stat-number" data-number="@ViewData["HospitalCount"]">@ViewData["HospitalCount"]</div>
                <div class="stat-label">Active Hospitals</div>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-lg-6">
            <div class="card shadow-sm border-0 rounded-3 mb-3">
                <div class="card-header bg-primary text-white">Policies Overview</div>
                <div class="card-body chart-container">
                    <canvas id="policiesChart"></canvas>
                </div>
            </div>
        </div>
        <div class="col-lg-6">
            <div class="card shadow-sm border-0 rounded-3 mb-3">
                <div class="card-header bg-success text-white">Claims Overview</div>
                <div class="card-body chart-container">
                    <canvas id="claimsChart"></canvas>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    .stat-counter {
        display: flex;
        flex-direction: column;
        align-items: center;
        padding: 20px;
        border-radius: 15px;
        color: #fff;
        background: linear-gradient(135deg, rgba(255,255,255,0.1), rgba(255,255,255,0));
        transition: transform 0.3s ease, box-shadow 0.3s ease;
    }

    .card-gradient-primary {
        background: linear-gradient(135deg, #1e3c72, #2a5298);
    }

    .card-gradient-success {
        background: linear-gradient(135deg, #1d976c, #93f9b9);
    }

    .card-gradient-warning {
        background: linear-gradient(135deg, #f5af19, #f12711);
    }

    .card-gradient-danger {
        background: linear-gradient(135deg, #8e2de2, #4a00e0);
    }

    .stat-icon {
        font-size: 2.5rem;
        margin-bottom: 10px;
    }

    .stat-number {
        font-size: 2.5rem;
        font-weight: bold;
    }

    .stat-label {
        font-size: 1.25rem;
    }

    .stat-counter:hover {
        transform: scale(1.05);
        box-shadow: 0px 4px 20px rgba(0, 0, 0, 0.2);
    }

    .chart-container {
        position: relative;
        height: 400px;
    }

    .card {
        margin-bottom: 30px;
        border-radius: 20px;
    }

    .card-header {
        font-size: 1.5rem;
        padding: 15px;
    }

    .card-body {
        padding: 20px;
    }
</style>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
    document.addEventListener('DOMContentLoaded', function () {
        document.querySelectorAll('.stat-number').forEach(function (el) {
            const number = parseInt(el.getAttribute('data-number'), 10);
            let counter = 0;
            const interval = setInterval(function () {
                if (counter >= number) {
                    clearInterval(interval);
                } else {
                    counter += Math.ceil(number / 100);
                    el.textContent = counter > number ? number : counter;
                }
            }, 10);
        });
    });

    var ctx = document.getElementById('policiesChart').getContext('2d');
    var policiesChart = new Chart(ctx, {
        type: 'bar',
        data: {
            labels: ['January', 'February', 'March', 'April', 'May', 'June'],
            datasets: [{
                label: 'Number of Policies',
                data: [12, 19, 3, 5, 2, 3],
                backgroundColor: 'rgba(54, 162, 235, 0.2)',
                borderColor: 'rgba(54, 162, 235, 1)',
                borderWidth: 1
            }]
        },
        options: {
            animation: {
                duration: 1500
            },
            scales: {
                y: {
                    beginAtZero: true
                }
            }
        }
    });

    var ctx2 = document.getElementById('claimsChart').getContext('2d');
    var claimsChart = new Chart(ctx2, {
        type: 'line',
        data: {
            labels: ['January', 'February', 'March', 'April', 'May', 'June'],
            datasets: [{
                label: 'Number of Claims',
                data: [3, 2, 5, 7, 6, 4],
                backgroundColor: 'rgba(255, 99, 132, 0.2)',
                borderColor: 'rgba(255, 99, 132, 1)',
                borderWidth: 1,
                tension: 0.4
            }]
        },
        options: {
            animation: {
                duration: 1500
            },
            scales: {
                y: {
                    beginAtZero: true
                }
            }
        }
    });
</script>
Dashboard

