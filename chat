using InsuranceApi.DTOs;
using System.Collections.Generic;
using System.Threading.Tasks;

namespace WebApplication1.Services
{
    public interface IPolicyRequestService
    {
        Task<List<InsuredPolicyDto>> GetPendingPolicyRequestsAsync();
        Task<PolicyHolderDto> GetPolicyHolderDetailsAsync(int policyHolderId);
        Task<PolicyDto> GetPolicyDetailsAsync(int policyId);
        Task<PaymentDto> GetPaymentDetailsAsync(int insuredPolicyId);
        Task<bool> UpdateApprovalStatusAsync(int insuredPolicyId, string status, int adminId);
    }
}


using InsuranceApi.DTOs;
using System.Collections.Generic;
using System.Net.Http;
using System.Net.Http.Json;
using System.Text.Json;
using System.Threading.Tasks;

namespace WebApplication1.Services
{
    public class PolicyRequestService : IPolicyRequestService
    {
        private readonly HttpClient _httpClient;

        public PolicyRequestService(HttpClient httpClient)
        {
            _httpClient = httpClient;
        }

        public async Task<List<InsuredPolicyDto>> GetPendingPolicyRequestsAsync()
        {
            var response = await _httpClient.GetAsync("InsuredPolicy");
            response.EnsureSuccessStatusCode();

            var jsonResponse = await response.Content.ReadAsStringAsync();
            var policyRequests = JsonSerializer.Deserialize<List<InsuredPolicyDto>>(jsonResponse, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });

            return policyRequests?.FindAll(p => p.ApprovalStatus == "Pending");
        }

        public async Task<PolicyHolderDto> GetPolicyHolderDetailsAsync(int policyHolderId)
        {
            var response = await _httpClient.GetAsync($"PolicyHolder/{policyHolderId}");
            response.EnsureSuccessStatusCode();
            return await response.Content.ReadFromJsonAsync<PolicyHolderDto>();
        }

        public async Task<PolicyDto> GetPolicyDetailsAsync(int policyId)
        {
            var response = await _httpClient.GetAsync($"Policy/{policyId}");
            response.EnsureSuccessStatusCode();
            return await response.Content.ReadFromJsonAsync<PolicyDto>();
        }

        public async Task<PaymentDto> GetPaymentDetailsAsync(int insuredPolicyId)
        {
            var response = await _httpClient.GetAsync($"Payment/{insuredPolicyId}");
            response.EnsureSuccessStatusCode();
            return await response.Content.ReadFromJsonAsync<PaymentDto>();
        }

        public async Task<bool> UpdateApprovalStatusAsync(int insuredPolicyId, string status, int adminId)
        {
            var requestBody = new { InsuredPolicyId = insuredPolicyId, ApprovalStatus = status, AdminId = adminId };
            var response = await _httpClient.PutAsJsonAsync("InsuredPolicy", requestBody);
            return response.IsSuccessStatusCode;
        }
    }
}



using InsuranceApi.DTOs;
using Microsoft.AspNetCore.Mvc;
using System.Threading.Tasks;
using WebApplication1.Services;

namespace WebApplication1.Controllers
{
    public class PolicyRequestController : Controller
    {
        private readonly IPolicyRequestService _policyRequestService;

        public PolicyRequestController(IPolicyRequestService policyRequestService)
        {
            _policyRequestService = policyRequestService;
        }

        public async Task<IActionResult> Index()
        {
            var pendingRequests = await _policyRequestService.GetPendingPolicyRequestsAsync();
            return View(pendingRequests);
        }

        public async Task<IActionResult> Review(int id)
        {
            var policyRequest = await _policyRequestService.GetPendingPolicyRequestsAsync();
            var request = policyRequest.Find(p => p.InsuredPolicyId == id);

            var policyHolder = await _policyRequestService.GetPolicyHolderDetailsAsync(request.PolicyHolderId);
            var policyDetails = await _policyRequestService.GetPolicyDetailsAsync(request.PolicyId);
            var paymentDetails = await _policyRequestService.GetPaymentDetailsAsync(request.InsuredPolicyId);

            var model = new ReviewPolicyRequestViewModel
            {
                PolicyHolder = policyHolder,
                Policy = policyDetails,
                Payment = paymentDetails,
                InsuredPolicy = request
            };

            return PartialView("_ReviewPolicyRequest", model);
        }

        public async Task<IActionResult> UpdateStatus(int id, string status)
        {
            bool success = await _policyRequestService.UpdateApprovalStatusAsync(id, status, /* AdminId */ 1);
            if (success)
            {
                return Json(new { success = true });
            }

            return Json(new { success = false });
        }
    }
}
