@* Dashboard.cshtml *@
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewData["Title"] = "Dashboard";
}

<div class="container-fluid">
    <h1 class="text-center mt-4 mb-4">Admin Dashboard</h1>
    <hr />
    <div class="row mb-4">
        <div class="col-lg-3 col-md-6">
            <div class="stat-counter bg-primary text-white mb-3">
                <div class="stat-icon">
                    <i class="fas fa-file-alt"></i>
                </div>
                <div class="stat-number" data-number="1500">1500</div>
                <div class="stat-label">Total Policies</div>
            </div>
        </div>
        <div class="col-lg-3 col-md-6">
            <div class="stat-counter bg-success text-white mb-3">
                <div class="stat-icon">
                    <i class="fas fa-clipboard-check"></i>
                </div>
                <div class="stat-number" data-number="200">200</div>
                <div class="stat-label">Active Claims</div>
            </div>
        </div>
        <div class="col-lg-3 col-md-6">
            <div class="stat-counter bg-warning text-white mb-3">
                <div class="stat-icon">
                    <i class="fas fa-ban"></i>
                </div>
                <div class="stat-number" data-number="50">50</div>
                <div class="stat-label">Rejected Claims</div>
            </div>
        </div>
        <div class="col-lg-3 col-md-6">
            <div class="stat-counter bg-danger text-white mb-3">
                <div class="stat-icon">
                    <i class="fas fa-hospital"></i>
                </div>
                <div class="stat-number" data-number="200">200</div>
                <div class="stat-label">Active Hospitals</div>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-lg-6">
            <div class="card">
                <div class="card-header">Policies Overview</div>
                <div class="card-body chart-container">
                    <canvas id="policiesChart"></canvas>
                </div>
            </div>
        </div>
        <div class="col-lg-6">
            <div class="card">
                <div class="card-header">Claims Overview</div>
                <div class="card-body chart-container">
                    <canvas id="claimsChart"></canvas>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    .stat-counter {
        display: flex;
        flex-direction: column;
        align-items: center;
        padding: 30px;
        border-radius: 15px;
        color: #fff;
        transition: transform 0.3s ease, box-shadow 0.3s ease;
    }

    .stat-icon {
        font-size: 2rem;
        margin-bottom: 10px;
    }

    .stat-number {
        font-size: 3rem;
        font-weight: bold;
    }

    .stat-label {
        font-size: 1.25rem;
    }

    .stat-counter:hover {
        transform: scale(1.05);
        box-shadow: 0px 4px 20px rgba(0, 0, 0, 0.2);
    }

    .chart-container {
        position: relative;
        height: 400px;
    }
</style>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
    document.addEventListener('DOMContentLoaded', function () {
        document.querySelectorAll('.stat-number').forEach(function (el) {
            const number = parseInt(el.getAttribute('data-number'), 10);
            let counter = 0;
            const interval = setInterval(function () {
                if (counter >= number) {
                    clearInterval(interval);
                } else {
                    counter += Math.ceil(number / 100);
                    el.textContent = counter > number ? number : counter;
                }
            }, 10);
        });
    });
    var ctx = document.getElementById('policiesChart').getContext('2d');
    var policiesChart = new Chart(ctx, {
        type: 'bar',
        data: {
            labels: ['January', 'February', 'March', 'April', 'May', 'June'],
            datasets: [{
                label: 'Number of Policies',
                data: [12, 19, 3, 5, 2, 3],
                backgroundColor: 'rgba(54, 162, 235, 0.2)',
                borderColor: 'rgba(54, 162, 235, 1)',
                borderWidth: 1
            }]
        },
        options: {
            animation: {
                duration: 1500
            }
        }
    });

    var ctx2 = document.getElementById('claimsChart').getContext('2d');
    var claimsChart = new Chart(ctx2, {
        type: 'line',
        data: {
            labels: ['January', 'February', 'March', 'April', 'May', 'June'],
            datasets: [{
                label: 'Number of Claims',
                data: [3, 2, 5, 7, 6, 4],
                backgroundColor: 'rgba(255, 99, 132, 0.2)',
                borderColor: 'rgba(255, 99, 132, 1)',
                borderWidth: 1
            }]
        },
        options: {
            animation: {
                duration: 1500
            }
        }
    });
</script>


This is my Dashboard


@model List<WebApplication1.Controllers.PolicyRequestViewModel>

@{
    ViewData["Title"] = "Policy Requests";
}

<h2 class="page-title">Policy Requests</h2>

<div class="table-responsive">
    <table class="table table-bordered table-hover">
        <thead class="thead-custom">
            <tr>
                <th>Insured Policy ID</th>
                <th>Insured ID</th>
                <th>Policy ID</th>
                <th>Policy Holder ID</th>
                <th>Name</th>
                <th>Contact No</th>
                <th>Approval Status</th>
                <th>Approval Date</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model)
            {
                <tr>
                    <td>@item.InsuredPolicyId</td>
                    <td>@item.InsuredId</td>
                    <td>@item.PolicyId</td>
                    <td>@item.PolicyHolderId</td>
                    <td>@item.Name</td>
                    <td>@item.ContactNo</td>
                    <td>@item.ApprovalStatus</td>
                    <td>@item.ApprovalDate?.ToString("yyyy-MM-dd HH:mm:ss")</td>
                    <td>
                        <button class="btn btn-info review-button" onclick="reviewPolicy(@item.InsuredPolicyId)">Review</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

<!-- Modal -->
<div class="modal fade" id="reviewModal" tabindex="-1" role="dialog" aria-labelledby="reviewModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="reviewModalLabel">Review Policy Request</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body" id="reviewModalBody">
                <!-- Review details will be loaded here -->
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        function reviewPolicy(insuredPolicyId) {
            $.ajax({
                url: '@Url.Action("Review", "PolicyRequest")',
                data: { insuredPolicyId: insuredPolicyId },
                success: function (response) {
                    $('#reviewModalBody').html(response);
                    $('#reviewModal').modal('show');
                }
            });
        }

        function updateApprovalStatus(insuredPolicyId, approvalStatus) {
            // Include anti-forgery token
            var token = $('input[name="__RequestVerificationToken"]').val();
            $.ajax({
                url: '@Url.Action("UpdateApprovalStatus", "PolicyRequest")',
                type: 'POST',
                data: {
                    __RequestVerificationToken: token,
                    insuredPolicyId: insuredPolicyId,
                    approvalStatus: approvalStatus
                },
                success: function (result) {
                    window.location.reload();
                },
                error: function (xhr, status, error) {
                    alert('Error: ' + xhr.responseText);
                }
            });
        }
    </script>
}

<style>
    body {
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }

    .page-title {
        font-size: 2rem;
        margin-bottom: 20px;
        color: #333;
        text-align: center;
    }

    .table-responsive {
        padding: 20px;
        border-radius: 8px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        background-color: #f9f9f9;
    }

    .thead-custom {
        background-color: #007bff;
        color: white;
    }

    .table-hover tbody tr:hover {
        background-color: #f1f1f1;
    }

    .btn-info.review-button {
        background-color: #17a2b8;
        border: none;
        transition: background-color 0.3s ease, transform 0.3s ease;
    }

        .btn-info.review-button:hover {
            background-color: #138496;
            transform: translateY(-2px);
        }

    .modal-header {
        background-color: #007bff;
        color: white;
    }

    .modal-content {
        border-radius: 8px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        transition: transform 0.3s ease-in-out;
    }

    .modal.fade .modal-dialog {
        transition: transform 0.3s ease-out;
        transform: translateY(-100px);
    }

    .modal.show .modal-dialog {
        transform: translateY(0);
    }
</style>

this is my polyicyrequesr chstml

using InsuranceApi.DTOs;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Logging;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using WebApplication1.Services;

namespace WebApplication1.Controllers
{
    public class PolicyRequestController : Controller
    {
        private readonly IPolicyRequestService _policyRequestService;
        private readonly ILogger<PolicyRequestController> _logger;

        public PolicyRequestController(IPolicyRequestService policyRequestService, ILogger<PolicyRequestController> logger)
        {
            _policyRequestService = policyRequestService;
            _logger = logger;
        }

        public async Task<IActionResult> Index()
        {
            var insuredPolicies = await _policyRequestService.GetInsuredPoliciesAsync();
            var policyRequests = new List<PolicyRequestViewModel>();

            foreach (var policy in insuredPolicies)
            {
                var policyHolder = await _policyRequestService.GetPolicyHolderAsync(policy.InsuredId);
                if (policyHolder != null)
                {
                    policyRequests.Add(new PolicyRequestViewModel
                    {
                        InsuredPolicyId = policy.InsuredPolicyId,
                        InsuredId = policy.InsuredId,
                        PolicyId = policy.PolicyId,
                        PolicyHolderId = policyHolder.PolicyHolderId,
                        Name = policyHolder.Name,
                        ContactNo = policyHolder.Phone,
                        ApprovalStatus = policy.ApprovalStatus,
                        ApprovalDate = policy.ApprovalDate
                    });
                }
                else
                {
                    _logger.LogWarning($"PolicyHolder not found for InsuredId: {policy.InsuredId}");
                }
            }

            return View(policyRequests);
        }

        public async Task<IActionResult> Review(int insuredPolicyId)
        {
            var insuredPolicy = (await _policyRequestService.GetInsuredPoliciesAsync())
                .FirstOrDefault(p => p.InsuredPolicyId == insuredPolicyId);

            if (insuredPolicy == null)
            {
                _logger.LogWarning($"InsuredPolicy not found for Id: {insuredPolicyId}");
                return NotFound();
            }

            var policyHolder = await _policyRequestService.GetPolicyHolderAsync(insuredPolicy.InsuredId);
            var policy = await _policyRequestService.GetPolicyAsync(insuredPolicy.PolicyId);
            var payments = await _policyRequestService.GetPaymentsByInsuredPolicyIdAsync(insuredPolicy.InsuredPolicyId);

            var viewModel = new ReviewPolicyRequestViewModel
            {
                PolicyHolderName = policyHolder?.Name ?? "N/A",
                ContactNo = policyHolder?.Phone ??"N/A",
                InsuredId = insuredPolicy.InsuredId,
                InsuredPolicyId = insuredPolicy.InsuredPolicyId,
                PolicyId = insuredPolicy.PolicyId,
                AdminId = insuredPolicy.AdminId,
                PremiumAmount = policy?.PremiumAmount ?? 0,
                PaymentId = payments.FirstOrDefault()?.PaymentId ?? 0,
                PaymentAmount = payments.FirstOrDefault()?.PaymentAmount ?? 0,
                PaymentDate = payments.FirstOrDefault()?.PaymentDate ?? null
            };

            return PartialView("_ReviewPolicyRequest", viewModel);
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> UpdateApprovalStatus(int insuredPolicyId, string approvalStatus)
        {
            if (string.IsNullOrWhiteSpace(approvalStatus))
            {
                _logger.LogWarning("Approval status is required.");
                return BadRequest("Approval status is required.");
            }

            var isValidStatus = new[] { "Approved", "Rejected", "Pending" }.Contains(approvalStatus);
            if (!isValidStatus)
            {
                _logger.LogWarning($"Invalid approval status: {approvalStatus}");
                return BadRequest("Invalid approval status.");
            }

            var success = await _policyRequestService.UpdateApprovalStatusAsync(insuredPolicyId, approvalStatus);
            if (success)
            {
                _logger.LogInformation($"Approval status updated to '{approvalStatus}' for InsuredPolicyId: {insuredPolicyId}");
                return Json(new { success = true });
            }
            else
            {
                _logger.LogError($"Failed to update approval status for InsuredPolicyId: {insuredPolicyId}");
                return BadRequest("Failed to update approval status.");
            }
        }
    }

    public class PolicyRequestViewModel
    {
        public int InsuredPolicyId { get; set; }
        public int InsuredId { get; set; }
        public int PolicyId { get; set; }
        public int PolicyHolderId { get; set; }
        public string Name { get; set; }
        public string ApprovalStatus { get; set; }
        public DateTime? ApprovalDate { get; set; }
        public string ContactNo { get;  set; }
    }

    public class ReviewPolicyRequestViewModel
    {
        public string PolicyHolderName { get; set; }
        public int InsuredId { get; set; }
        public int InsuredPolicyId { get; set; }
        public int PolicyId { get; set; }
        public int AdminId { get; set; }
        public decimal PremiumAmount { get; set; }
        public int PaymentId { get; set; }
        public decimal PaymentAmount { get; set; }
        public DateTime? PaymentDate { get; set; }
        public object? ContactNo { get; internal set; }
    }
}

PolicyRequest Controller

using InsuranceApi.DTOs;
using System.Collections.Generic;
using System.Net.Http;
using System.Net.Http.Json;
using System.Text.Json;
using System.Threading.Tasks;

namespace WebApplication1.Services
{
    public class PolicyRequestService : IPolicyRequestService
    {
        private readonly HttpClient _httpClient;

        public PolicyRequestService(HttpClient httpClient)
        {
            _httpClient = httpClient;
        }

        public async Task<List<InsuredPolicyDto>> GetInsuredPoliciesAsync()
        {
            var response = await _httpClient.GetAsync("InsuredPolicy");
            response.EnsureSuccessStatusCode();
            return await response.Content.ReadFromJsonAsync<List<InsuredPolicyDto>>();
        }

        public async Task<PolicyHolderDto> GetPolicyHolderAsync(int policyHolderId)
        {
            var response = await _httpClient.GetAsync($"PolicyHolder/{policyHolderId}");
            response.EnsureSuccessStatusCode();
            return await response.Content.ReadFromJsonAsync<PolicyHolderDto>();
        }

        public async Task<PolicyDto> GetPolicyAsync(int policyId)
        {
            var response = await _httpClient.GetAsync($"Policy/{policyId}");
            response.EnsureSuccessStatusCode();
            return await response.Content.ReadFromJsonAsync<PolicyDto>();
        }

        public async Task<List<PaymentDto>> GetPaymentsByInsuredPolicyIdAsync(int insuredPolicyId)
        {
            var response = await _httpClient.GetAsync($"Payment?insuredPolicyId={insuredPolicyId}");
            response.EnsureSuccessStatusCode();
            return await response.Content.ReadFromJsonAsync<List<PaymentDto>>();
        }

        public async Task<bool> UpdateApprovalStatusAsync(int insuredPolicyId, string approvalStatus)
        {
            var response = await _httpClient.PutAsJsonAsync($"InsuredPolicy/{insuredPolicyId}/ApprovalStatus", approvalStatus);
            return response.IsSuccessStatusCode;
        }
    }
}

public interface IPolicyRequestService
{
    Task<List<InsuredPolicyDto>> GetInsuredPoliciesAsync();
    Task<PolicyHolderDto> GetPolicyHolderAsync(int policyHolderId);
    Task<PolicyDto> GetPolicyAsync(int policyId);
    Task<List<PaymentDto>> GetPaymentsByInsuredPolicyIdAsync(int insuredPolicyId);
    Task<bool> UpdateApprovalStatusAsync(int insuredPolicyId, string approvalStatus);
}

This is my policyRequest Service
