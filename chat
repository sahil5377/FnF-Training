using InsuranceApi.DTOs;
using System.Collections.Generic;
using System.Net.Http;
using System.Net.Http.Json;
using System.Text.Json;
using System.Threading.Tasks;

namespace WebApplication1.Services
{
    public class PolicyRequestService : IPolicyRequestService
    {
        private readonly HttpClient _httpClient;

        public PolicyRequestService(HttpClient httpClient)
        {
            _httpClient = httpClient;
        }

        public async Task<List<InsuredPolicyDto>> GetInsuredPoliciesAsync()
        {
            var response = await _httpClient.GetAsync("InsuredPolicy");
            response.EnsureSuccessStatusCode();
            return await response.Content.ReadFromJsonAsync<List<InsuredPolicyDto>>();
        }

        public async Task<PolicyHolderDto> GetPolicyHolderAsync(int policyHolderId)
        {
            var response = await _httpClient.GetAsync($"PolicyHolder/{policyHolderId}");
            response.EnsureSuccessStatusCode();
            return await response.Content.ReadFromJsonAsync<PolicyHolderDto>();
        }

        public async Task<PolicyDto> GetPolicyAsync(int policyId)
        {
            var response = await _httpClient.GetAsync($"Policy/{policyId}");
            response.EnsureSuccessStatusCode();
            return await response.Content.ReadFromJsonAsync<PolicyDto>();
        }

        public async Task<List<PaymentDto>> GetPaymentsByInsuredPolicyIdAsync(int insuredPolicyId)
        {
            var response = await _httpClient.GetAsync($"Payment?insuredPolicyId={insuredPolicyId}");
            response.EnsureSuccessStatusCode();
            return await response.Content.ReadFromJsonAsync<List<PaymentDto>>();
        }

        public async Task<bool> UpdateApprovalStatusAsync(int insuredPolicyId, string approvalStatus)
        {
            var content = JsonContent.Create(new { ApprovalStatus = approvalStatus });
            var response = await _httpClient.PutAsync($"InsuredPolicy/{insuredPolicyId}/ApprovalStatus", content);
            return response.IsSuccessStatusCode;
        }
    }
}


using InsuranceApi.DTOs;
using System.Collections.Generic;
using System.Threading.Tasks;

namespace WebApplication1.Services
{
    public interface IPolicyRequestService
    {
        Task<List<InsuredPolicyDto>> GetInsuredPoliciesAsync();
        Task<PolicyHolderDto> GetPolicyHolderAsync(int policyHolderId);
        Task<PolicyDto> GetPolicyAsync(int policyId);
        Task<List<PaymentDto>> GetPaymentsByInsuredPolicyIdAsync(int insuredPolicyId);
        Task<bool> UpdateApprovalStatusAsync(int insuredPolicyId, string approvalStatus);
    }
}


using InsuranceApi.DTOs;
using Microsoft.AspNetCore.Mvc;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using WebApplication1.Services;

namespace WebApplication1.Controllers
{
    public class PolicyRequestController : Controller
    {
        private readonly IPolicyRequestService _policyRequestService;

        public PolicyRequestController(IPolicyRequestService policyRequestService)
        {
            _policyRequestService = policyRequestService;
        }

        public async Task<IActionResult> Index()
        {
            var insuredPolicies = await _policyRequestService.GetInsuredPoliciesAsync();

            var policyRequests = new List<PolicyRequestViewModel>();
            foreach (var policy in insuredPolicies)
            {
                var policyHolder = await _policyRequestService.GetPolicyHolderAsync(policy.InsuredId);
                policyRequests.Add(new PolicyRequestViewModel
                {
                    InsuredPolicyId = policy.InsuredPolicyId,
                    InsuredId = policy.InsuredId,
                    PolicyId = policy.PolicyId,
                    PolicyHolderId = policyHolder.PolicyHolderId,
                    Name = policyHolder.Name,
                    ApprovalStatus = policy.ApprovalStatus,
                    ApprovalDate = policy.ApprovalDate
                });
            }

            return View(policyRequests);
        }

        public async Task<IActionResult> Review(int insuredPolicyId)
        {
            var insuredPolicy = (await _policyRequestService.GetInsuredPoliciesAsync())
                .FirstOrDefault(p => p.InsuredPolicyId == insuredPolicyId);
            var policyHolder = await _policyRequestService.GetPolicyHolderAsync(insuredPolicy.InsuredId);
            var policy = await _policyRequestService.GetPolicyAsync(insuredPolicy.PolicyId);
            var payments = await _policyRequestService.GetPaymentsByInsuredPolicyIdAsync(insuredPolicy.InsuredPolicyId);

            var viewModel = new ReviewPolicyRequestViewModel
            {
                PolicyHolderName = policyHolder.Name,
                InsuredId = insuredPolicy.InsuredId,
                InsuredPolicyId = insuredPolicy.InsuredPolicyId,
                PolicyId = insuredPolicy.PolicyId,
                AdminId = insuredPolicy.AdminId,
                PremiumAmount = policy.PremiumAmount,
                PaymentId = payments.FirstOrDefault()?.PaymentId ?? 0,
                PaymentAmount = payments.FirstOrDefault()?.PaymentAmount ?? 0,
                PaymentDate = payments.FirstOrDefault()?.PaymentDate ?? null
            };

            return PartialView("_ReviewPolicyRequest", viewModel);
        }

        [HttpPost]
        public async Task<IActionResult> UpdateApprovalStatus(int insuredPolicyId, string status)
        {
            var success = await _policyRequestService.UpdateApprovalStatusAsync(insuredPolicyId, status);
            return Json(new { success });
        }
    }

    public class PolicyRequestViewModel
    {
        public int InsuredPolicyId { get; set; }
        public int InsuredId { get; set; }
        public int PolicyId { get; set; }
        public int PolicyHolderId { get; set; }
        public string Name { get; set; }
        public string ApprovalStatus { get; set; }
        public DateTime? ApprovalDate { get; set; }
    }

    public class ReviewPolicyRequestViewModel
    {
        public string PolicyHolderName { get; set; }
        public int InsuredId { get; set; }
        public int InsuredPolicyId { get; set; }
        public int PolicyId { get; set; }
        public int AdminId { get; set; }
        public decimal PremiumAmount { get; set; }
        public int PaymentId { get; set; }
        public decimal PaymentAmount { get; set; }
        public DateTime? PaymentDate { get; set; }
    }
}
