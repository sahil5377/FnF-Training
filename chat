using Microsoft.AspNetCore.Authentication;
using Microsoft.AspNetCore.Authentication.Cookies;
using Microsoft.AspNetCore.Mvc;
using System.Security.Claims;
using WebApplication1.Services;
namespace WebApplication1.Controllers
{
    public class AccountController : Controller
    {
        private readonly AdminService adminService;

        public AccountController(AdminService adminService)
        {
            this.adminService = adminService;
        }

        public IActionResult Login()
        {
            return View();
        }
        [HttpPost]
        public async Task<IActionResult> Login(string username, string password)
        {
            var admin = await adminService.GetAdminByNameAsync(username);
            if (admin != null && VerifyPasswordHash(password, admin.PasswordHash))
            {
                var claims = new[]
                {
                    new Claim(ClaimTypes.Name, admin.Name)
                };
                var identity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);
                var principal = new ClaimsPrincipal(identity);

                await HttpContext.SignInAsync(CookieAuthenticationDefaults.AuthenticationScheme, principal);

                return RedirectToAction("Index", "Home");
            }
            ModelState.AddModelError("", "Invalid Login UserName OR Password.");
            return View();
        }
        public async Task<IActionResult> Logout()
        {
            await HttpContext.SignOutAsync();
            return RedirectToAction("Login", "Account");
        }
        private bool VerifyPasswordHash(string password, string storedhash)
        {
            //Implemented Pass Logic Here
            return password == storedhash;
        }
    }
}
