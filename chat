@model List<WebApplication1.Models.Hospital>

@{
    ViewData["Title"] = "Manage Hospitals";
}

<h2>Manage Hospitals</h2>

<table class="table table-striped">
    <thead>
        <tr>
            <th scope="col">Hospital ID</th>
            <th scope="col">Name</th>
            <th scope="col">Address</th>
            <th scope="col">Phone No</th>
            <th scope="col">Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var hospital in Model)
        {
            <tr>
                <td>@hospital.HospitalId</td>
                <td>@hospital.Name</td>
                <td>@hospital.Address</td>
                <td>@hospital.Phone</td>
                <td>
                    <form method="post" asp-action="DeleteHospital" asp-controller="Hospital" style="display:inline;">
                        <input type="hidden" name="hospitalId" value="@hospital.HospitalId" />
                        <button type="submit" class="btn btn-danger" onclick="return confirm('Are you sure you want to delete this hospital?');">Delete</button>
                    </form>
                    <button class="btn btn-primary" onclick="editHospital(@hospital.HospitalId)">Edit</button>
                </td>
            </tr>
        }
    </tbody>
</table>

<button class="btn btn-success mt-4" onclick="showAddHospitalModal()">Add Hospital</button>

<!-- Add Hospital Modal -->
<div id="addHospitalModal" class="modal fade" tabindex="-1" aria-labelledby="addHospitalModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="addHospitalModalLabel">Add Hospital</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form method="post" asp-action="AddHospital" asp-controller="Hospital">
                    <div class="mb-3">
                        <label for="hospitalName" class="form-label">Name</label>
                        <input type="text" class="form-control" id="hospitalName" name="Name" required />
                    </div>
                    <div class="mb-3">
                        <label for="hospitalAddress" class="form-label">Address</label>
                        <input type="text" class="form-control" id="hospitalAddress" name="Address" required />
                    </div>
                    <div class="mb-3">
                        <label for="hospitalPhone" class="form-label">Phone</label>
                        <input type="text" class="form-control" id="hospitalPhone" name="Phone" required />
                    </div>
                    <button type="submit" class="btn btn-primary">Add Hospital</button>
                </form>
            </div>
        </div>
    </div>
</div>

<!-- Edit Hospital Modal -->
<div id="editHospitalModal" class="modal fade" tabindex="-1" aria-labelledby="editHospitalModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editHospitalModalLabel">Edit Hospital</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form method="post" asp-action="UpdateHospital" asp-controller="Hospital">
                    <input type="hidden" id="editHospitalId" name="HospitalId" />
                    <div class="mb-3">
                        <label for="editHospitalName" class="form-label">Name</label>
                        <input type="text" class="form-control" id="editHospitalName" name="Name" required />
                    </div>
                    <div class="mb-3">
                        <label for="editHospitalAddress" class="form-label">Address</label>
                        <input type="text" class="form-control" id="editHospitalAddress" name="Address" required />
                    </div>
                    <div class="mb-3">
                        <label for="editHospitalPhone" class="form-label">Phone</label>
                        <input type="text" class="form-control" id="editHospitalPhone" name="Phone" required />
                    </div>
                    <button type="submit" class="btn btn-primary">Update Hospital</button>
                </form>
            </div>
        </div>
    </div>
</div>

<script>
    function showAddHospitalModal() {
        var addModal = new bootstrap.Modal(document.getElementById('addHospitalModal'));
        addModal.show();
    }

    function editHospital(hospitalId) {
        var hospital = @Html.Raw(Json.Serialize(Model));
        var selectedHospital = hospital.find(h => h.HospitalId === hospitalId);

        document.getElementById('editHospitalId').value = selectedHospital.HospitalId;
        document.getElementById('editHospitalName').value = selectedHospital.Name;
        document.getElementById('editHospitalAddress').value = selectedHospital.Address;
        document.getElementById('editHospitalPhone').value = selectedHospital.Phone;

        var editModal = new bootstrap.Modal(document.getElementById('editHospitalModal'));
        editModal.show();
    }
</script>

.cshtml

using System.Net.Http;
using System.Net.Http.Json;
using System.Text.Json;
using WebApplication1.Models;

namespace WebApplication1.Services
{
    public class HospitalService : IHospitalService
    {
        private readonly HttpClient _httpClient;

        public HospitalService(HttpClient httpClient)
        {
            _httpClient = httpClient;
        }

        public async Task<List<Hospital>> GetAllHospitalsAsync()
        {
            var response = await _httpClient.GetAsync("Hospital");
            response.EnsureSuccessStatusCode();

            // The JSON data is inside an array, so we need to deserialize it accordingly
            var jsonResponse = await response.Content.ReadAsStringAsync();
            var hospitals = JsonSerializer.Deserialize<List<Hospital>>(jsonResponse, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });

            return hospitals;
        }

        public async Task<Hospital> AddHospitalAsync(Hospital hospital)
        {
            var response = await _httpClient.PostAsJsonAsync("Hospital", hospital);
            response.EnsureSuccessStatusCode();
            return await response.Content.ReadFromJsonAsync<Hospital>();
        }

        public async Task UpdateHospitalAsync(Hospital hospital)
        {
            var response = await _httpClient.PutAsJsonAsync($"Hospital/{hospital.HospitalId}", hospital);
            response.EnsureSuccessStatusCode();
        }

        public async Task DeleteHospitalAsync(int hospitalId)
        {
            var response = await _httpClient.DeleteAsync($"Hospital/{hospitalId}");
            response.EnsureSuccessStatusCode();
        }
    }

    public interface IHospitalService
    {
        Task<List<Hospital>> GetAllHospitalsAsync();
        Task<Hospital> AddHospitalAsync(Hospital hospital);
        Task UpdateHospitalAsync(Hospital hospital);
        Task DeleteHospitalAsync(int hospitalId);
    }
}

service
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using WebApplication1.Models;
using WebApplication1.Services;

namespace WebApplication1.Controllers
{
    [Authorize]
    public class HospitalController : Controller
    {
        private readonly IHospitalService _hospitalService;

        public HospitalController(IHospitalService hospitalService)
        {
            _hospitalService = hospitalService;
        }

        public async Task<IActionResult> ManageHospitals()
        {
            var hospitals = await _hospitalService.GetAllHospitalsAsync();
            return View(hospitals);
        }

        [HttpPost]
        public async Task<IActionResult> AddHospital(Hospital hospital)
        {
            if (ModelState.IsValid)
            {
                await _hospitalService.AddHospitalAsync(hospital);
                return RedirectToAction("ManageHospitals");
            }
            return View("ManageHospitals");
        }

        [HttpPost]
        public async Task<IActionResult> UpdateHospital(Hospital hospital)
        {
            if (ModelState.IsValid)
            {
                await _hospitalService.UpdateHospitalAsync(hospital);
                return RedirectToAction("ManageHospitals");
            }
            return View("ManageHospitals");
        }

        [HttpPost]
        public async Task<IActionResult> DeleteHospital(int hospitalId)
        {
            await _hospitalService.DeleteHospitalAsync(hospitalId);
            return RedirectToAction("ManageHospitals");
        }
    }
}

controller
