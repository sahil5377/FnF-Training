@model List<InsuranceApi.DTOs.ClaimDto>
@{
    ViewData["Title"] = "Manage Claims";
}

<h2>Manage Claims</h2>

<table class="table table-striped">
    <thead>
        <tr>
            <th scope="col">Claim ID</th>
            <th scope="col">Policy Holder ID</th>
            <th scope="col">Claim Date</th>
            <th scope="col">Claim Amount</th>
            <th scope="col">Claim Status</th>
            <th scope="col">Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var claim in Model)
        {
            <tr>
                <td>@claim.ClaimId</td>
                <td>@claim.PolicyHolderId</td>
                <td>@claim.ClaimDate.ToShortDateString()</td>
                <td>@claim.ClaimAmount</td>
                <td>@claim.ClaimStatus</td>
                <td>
                    <button class="btn btn-primary" onclick="showReviewModal(@claim.ClaimId)">Review</button>
                    <form method="post" asp-action="UpdateClaimStatus" asp-controller="Claim" style="display:inline;">
                        <input type="hidden" name="claimId" value="@claim.ClaimId" />
                        <button type="submit" name="status" value="Rejected" class="btn btn-danger">Reject</button>
                    </form>
                </td>
            </tr>
        }
    </tbody>
</table>

<!-- Review Modal -->
<div class="modal fade" id="reviewModal" tabindex="-1" role="dialog" aria-labelledby="reviewModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="reviewModalLabel">Review Claim</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form id="reviewForm">
                    <input type="hidden" id="claimId" name="claimId" />
                    <div class="form-group">
                        <label for="dispenseAmount">Dispense Amount</label>
                        <input type="number" class="form-control" id="dispenseAmount" name="dispenseAmount" value="0" />
                    </div>
                    <!-- Add more fields to display claim details as needed -->
                    <button type="submit" class="btn btn-success">Accept</button>
                </form>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.1/dist/js/bootstrap.bundle.min.js"></script>

    <script>
        function showReviewModal(claimId) {
            // Set the claim ID in the hidden input field
            document.getElementById('claimId').value = claimId;

            // Optionally, fetch claim details using AJAX and populate the modal
            // Here, you can call an API to get the claim details and set them in the modal fields

            // Show the modal
            $('#reviewModal').modal('show');
        }

        $(document).ready(function () {
            $('#reviewForm').submit(function (event) {
                event.preventDefault();

                var claimId = $('#claimId').val();
                var dispenseAmount = $('#dispenseAmount').val();

                $.ajax({
                    url: '@Url.Action("UpdateClaimStatus", "Claim")',
                    type: 'POST',
                    data: {
                        claimId: claimId,
                        status: 'Approved',
                        dispenseAmount: dispenseAmount
                    },
                    success: function (response) {
                        $('#reviewModal').modal('hide');
                        // Optionally reload the page or update the table row dynamically
                        location.reload();
                    },
                    error: function (xhr, status, error) {
                        alert('Error updating claim status.');
                    }
                });
            });
        });
    </script>
}

Manage Expense.cshtml

using InsuranceApi.DTOs;
using System.Net.Http;
using System.Net.Http.Json;
using System.Text.Json;

namespace WebApplication1.Services
{
    public class ClaimService : IClaimService
    {
        private readonly HttpClient _httpClient;

        public ClaimService(HttpClient httpClient)
        {
            _httpClient = httpClient;
        }

        public async Task<List<ClaimDto>> GetAllClaimsAsync()
        {
            string endpoint = "Claim";
            var response = await _httpClient.GetAsync(endpoint);
            response.EnsureSuccessStatusCode();

            var jsonResponse = await response.Content.ReadAsStringAsync();
            var claims = JsonSerializer.Deserialize<List<ClaimDto>>(jsonResponse, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });

            return claims;
        }

        public async Task UpdateClaimStatusAsync(int claimId, string status)
        {
            var response = await _httpClient.PutAsJsonAsync($"api/Claim/{claimId}/status", status);
            response.EnsureSuccessStatusCode();
        }
    }

    public interface IClaimService
    {
        Task<List<ClaimDto>> GetAllClaimsAsync();
        Task UpdateClaimStatusAsync(int claimId, string status);
    }
}
ClaimService in MVC
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using WebApplication1.Services;
using InsuranceApi.DTOs;
using Microsoft.AspNetCore.Cors;

namespace WebApplication1.Controllers
{
    [Authorize]
    public class ClaimController : Controller
    {
        private readonly IClaimService _claimService;

        public ClaimController(IClaimService claimService)
        {
            _claimService = claimService;
        }

        public async Task<IActionResult> ManageClaims()
        {
            var claims = await _claimService.GetAllClaimsAsync();
            return View(claims);
        }

        [HttpPost]
        public async Task<IActionResult> UpdateClaimStatus(int claimId, string status, dispenseAmount)
        {
            await _claimService.UpdateClaimStatusAsync(claimId, status);
            return RedirectToAction("ManageClaims");
        }
    }
}
Claim Controller
using Microsoft.AspNetCore.Authentication.Cookies;
using WebApplication1.Services;

namespace WebApplication1
{
    public class Program
    {
        public static void Main(string[] args)
        {
            var builder = WebApplication.CreateBuilder(args);

            // Add services to the container.
            builder.Services.AddControllersWithViews();

            // Register services with HTTP client
            builder.Services.AddHttpClient<IAdminService, AdminService>(client =>
            {
                client.BaseAddress = new Uri("http://localhost:5230/api/");
            });

            builder.Services.AddHttpClient<IHospitalService, HospitalService>(client =>
            {
                client.BaseAddress = new Uri("http://localhost:5230/api/");
            });

            builder.Services.AddHttpClient<IClaimService, ClaimService>(client =>
            {
                client.BaseAddress = new Uri("http://localhost:5230/api/");
            });

            // Add CORS policy if needed
            

            // Configure authentication
            builder.Services.AddAuthentication(CookieAuthenticationDefaults.AuthenticationScheme)
                .AddCookie(options =>
                {
                    options.LoginPath = "/Account/Login";
                    options.AccessDeniedPath = "/Account/AccessDenied";
                });

            var app = builder.Build();

            // Configure the HTTP request pipeline.
            if (!app.Environment.IsDevelopment())
            {
                app.UseExceptionHandler("/Home/Error");
                app.UseHsts();
            }

            app.UseHttpsRedirection();
            app.UseStaticFiles();
            app.UseRouting();
            app.UseAuthentication();
            app.UseAuthorization();

            app.MapControllerRoute(
                name: "default",
                pattern: "{controller=Account}/{action=Login}/{id?}");

            app.Run();
        }
    }
}
Program.cs
namespace InsuranceApi.DTOs
{
    public class ClaimDto
    {
        public int ClaimId { get; set; }
        public int InsuredPolicyId { get; set; }
        public int PolicyHolderId { get; set; }
        public DateTime ClaimDate { get; set; }
        public decimal ClaimAmount { get; set; }
        public string ClaimStatus { get; set; } = null!;
        public decimal? DispenseAmount { get; set; }
        public string DocumentType { get; set; } = null!;
        public string DocumentPath { get; set; } = null!;
        public int HospitalId { get; set; }
    }
}
This my dll use all this table feileds strictly
using InsuranceApi.DTOs;
using InsuranceApi.Services;
using Microsoft.AspNetCore.Mvc;

namespace InsuranceApi.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class ClaimController : ControllerBase
    {
        private readonly IClaimService service;

        public ClaimController(IClaimService service)
        {
            this.service = service;
        }

        [HttpGet]
        public async Task<IActionResult> GetAll()
        {
            List<ClaimDto> claims = await service.GetAll();
            return Ok(claims);
        }

        [HttpDelete("{id}")]
        public async Task<IActionResult> Delete(int id)
        {
            try
            {
                await service.Delete(id);
                return Ok();
            }
            catch (NullReferenceException)
            {
                return NotFound();
            }
        }

        [HttpPost]
        public async Task<IActionResult> Add(ClaimDto claim)
        {
            await service.Add(claim);
            return Ok();
        }

        [HttpPut]
        public async Task<IActionResult> Update(ClaimDto claim)
        {
            try
            {
                await service.Update(claim);
                return Ok();
            }
            catch (NullReferenceException)
            {
                return NotFound();
            }
        }

        [HttpGet("{id}")]
        public async Task<IActionResult> GetById(int id)
        {
            try
            {
                var found = await service.GetById(id);
                return Ok(found);
            }
            catch (NullReferenceException)
            {
                return NotFound();
            }
        }

        [HttpPut("{id}/status")]
        public async Task<IActionResult> UpdateStatus(int id, [FromBody] string status)
        {
            try
            {
                await service.UpdateStatus(id, status);
                return Ok();
            }
            catch (NullReferenceException)
            {
                return NotFound();
            }
        }
    }
}
ClaimController in Api
using InsuranceApi.Data;
using InsuranceApi.DTOs;
using Microsoft.EntityFrameworkCore;

namespace InsuranceApi.Services
{
    public interface IClaimService
    {
        Task Add(ClaimDto claimDto);
        Task Delete(int id);
        Task<List<ClaimDto>> GetAll();
        Task<ClaimDto> GetById(int id);
        Task Update(ClaimDto claimDto);
        Task UpdateStatus(int id, string status);
    }

    public class ClaimService : IClaimService
    {
        private readonly FnfProjectContext context;

        public ClaimService(FnfProjectContext context)
        {
            this.context = context;
        }

        public async Task<List<ClaimDto>> GetAll()
        {
            // Fetch all claims and convert to DTOs
            var claims = await context.Claims.AsNoTracking().ToListAsync();
            var claimDtos = claims.Select(claim => ConvertToDto(claim)).ToList();
            return claimDtos;
        }

        public async Task<ClaimDto> GetById(int id)
        {
            // Fetch claim by ID
            var found = await context.Claims.AsNoTracking()
                .FirstOrDefaultAsync(claim => claim.ClaimId == id);

            if (found != null)
                return ConvertToDto(found);

            throw new NullReferenceException($"Claim with ID {id} not found.");
        }

        public async Task Add(ClaimDto claimDto)
        {
            // Convert DTO to Entity and add to context
            Claim claimTable = new();
            ConvertToTable(claimDto, claimTable);
            context.Claims.Add(claimTable);
            await context.SaveChangesAsync();
        }

        public async Task Update(ClaimDto claimDto)
        {
            // Fetch claim and update details
            var found = await context.Claims
                .FirstOrDefaultAsync(claim => claim.ClaimId == claimDto.ClaimId);

            if (found != null)
            {
                ConvertToTable(claimDto, found);
                await context.SaveChangesAsync();
                return;
            }

            throw new NullReferenceException($"Claim with ID {claimDto.ClaimId} not found.");
        }

        public async Task Delete(int id)
        {
            // Fetch claim and remove from context
            var found = await context.Claims.FirstOrDefaultAsync(claim => claim.ClaimId == id);
            if (found != null)
            {
                context.Claims.Remove(found);
                await context.SaveChangesAsync();
                return;
            }
            throw new NullReferenceException($"Claim with ID {id} not found.");
        }

        public async Task UpdateStatus(int id, string status)
        {
            // Fetch claim and update status
            var found = await context.Claims.FirstOrDefaultAsync(claim => claim.ClaimId == id);

            if (found != null)
            {
                found.ClaimStatus = status;
                await context.SaveChangesAsync();
                return;
            }

            throw new NullReferenceException($"Claim with ID {id} not found.");
        }

        private ClaimDto ConvertToDto(Claim claimTable)
        {
            // Convert Entity to DTO
            return new ClaimDto
            {
                ClaimId = claimTable.ClaimId,
                PolicyHolderId = claimTable.PolicyHolderId,
                InsuredPolicyId = claimTable.InsuredPolicyId,
                ClaimAmount = claimTable.ClaimAmount,
                ClaimStatus = claimTable.ClaimStatus,
                DispenseAmount = claimTable.DispenseAmount,
                DocumentPath = claimTable.DocumentPath,
                DocumentType = claimTable.DocumentType,
                HospitalId = claimTable.HospitalId,
                ClaimDate = DateTime.Parse(claimTable.ClaimDate.ToString()),
            };
        }

        private void ConvertToTable(ClaimDto claimDto, Claim claimTable)
        {
            // Convert DTO to Entity
            claimTable.ClaimId = claimDto.ClaimId;
            claimTable.PolicyHolderId = claimDto.PolicyHolderId;
            claimTable.InsuredPolicyId = claimDto.InsuredPolicyId;
            claimTable.ClaimAmount = claimDto.ClaimAmount;
            claimTable.ClaimStatus = claimDto.ClaimStatus;
            claimTable.DispenseAmount = claimDto.DispenseAmount;
            claimTable.DocumentPath = claimDto.DocumentPath;
            claimTable.DocumentType = claimDto.DocumentType;
            claimTable.ClaimDate = DateOnly.FromDateTime(claimDto.ClaimDate);
            claimTable.HospitalId = claimDto.HospitalId;
        }
    }
}
Claim Service.cs in APi

These are all my files 
Where reject accept is not working after clicking on it says 
An unhandled exception occurred while processing the request.
HttpRequestException: Response status code does not indicate success: 404 (Not Found).
System.Net.Http.HttpResponseMessage.EnsureSuccessStatusCode()

Make all the changes in the file give me the all files fully written
