@model List<InsuranceApi.DTOs.InsuranceTypeDto>

@{
    ViewData["Title"] = "View Active Plans";
}

<h2>Active Plans</h2>

<div class="row">
    @foreach (var plan in Model)
    {
        <div class="col-md-3 mb-4">
            <div class="card shadow-sm">
                <div class="card-body">
                    <h5 class="card-title"><strong><h2>@plan.InsuranceType</h2></strong></h5>
                    <p class="card-text"><strong>Description:</strong><br>@plan.Description</p>
                    <p class="card-text"><strong>Base Rate:</strong> @plan.BaseRate</p>
                    <p class="card-text"><strong>Coverage Size:</strong> @plan.CoverageSize</p>
                    <a href="#" class="btn btn-primary">Details</a>
                </div>
            </div>
        </div>
    }
</div>
using InsuranceApi.DTOs;
using System.Collections.Generic;
using System.Net.Http;
using System.Net.Http.Json;
using System.Text.Json;
using System.Threading.Tasks;

namespace WebApplication1.Services
{
    public class InsuranceService : IInsuranceService
    {
        private readonly HttpClient _httpClient;

        public InsuranceService(HttpClient httpClient)
        {
            _httpClient = httpClient;
        }

        public async Task<List<InsuranceTypeDto>> GetActivePlansAsync()
        {
            string endpoint = "InsuranceType";
            var response = await _httpClient.GetAsync(endpoint);
            response.EnsureSuccessStatusCode();

            var jsonResponse = await response.Content.ReadAsStringAsync();
            var plans = JsonSerializer.Deserialize<List<InsuranceTypeDto>>(jsonResponse, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });

            return plans;
        }
        

    }
}
public interface IInsuranceService
{
    Task<List<InsuranceTypeDto>> GetActivePlansAsync();
}
using InsuranceApi.DTOs;
using Microsoft.AspNetCore.Mvc;
using System.Threading.Tasks;
using WebApplication1.Services;

namespace WebApplication1.Controllers
{
    public class PlansController : Controller
    {
        private readonly IInsuranceService _insuranceService;

        public PlansController(IInsuranceService insuranceService)
        {
            _insuranceService = insuranceService;
        }

        public IActionResult ManagePlans()
        {
            return View();
        }

        public async Task<IActionResult> ViewActivePlans()
        {
            // Fetch active plans from the service
            var activePlans = await _insuranceService.GetActivePlansAsync();
            return View(activePlans);
        }

        public IActionResult AddNewPlan()
        {
            // Your logic to add a new plan (form view)
            return View();
        }

        // Additional actions for plan management can be added here
    }
}

use this files and make the changes of update and delete inside these and give me all the files with the changes.
