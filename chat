using InsuranceApi.DTOs;
using System.Net.Http;
using System.Net.Http.Json;
using System.Text.Json;
using System.Threading.Tasks;

namespace YourNamespace.Services
{
    public class PolicyHolderService
    {
        private readonly HttpClient _httpClient;

        public PolicyHolderService(HttpClient httpClient)
        {
            _httpClient = httpClient;
        }

        public async Task<List<PolicyHolderDto>> GetPolicyHoldersAsync()
        {
            var response = await _httpClient.GetAsync("api/policyholders");

            if (response.IsSuccessStatusCode)
            {
                var policyHolders = await response.Content.ReadFromJsonAsync<List<PolicyHolderDto>>();
                return policyHolders ?? new List<PolicyHolderDto>();
            }

            return new List<PolicyHolderDto>();
        }

        public async Task<bool> UpdateStatusAsync(int policyHolderId, int status)
        {
            var response = await _httpClient.PutAsJsonAsync($"api/policyholders/{policyHolderId}/status", status);

            return response.IsSuccessStatusCode;
        }
    }
}


using Microsoft.AspNetCore.Mvc;
using YourNamespace.Services;
using InsuranceApi.DTOs;
using System.Threading.Tasks;
using System.Collections.Generic;

namespace YourNamespace.Controllers
{
    public class CustomerController : Controller
    {
        private readonly PolicyHolderService _policyHolderService;

        public CustomerController(PolicyHolderService policyHolderService)
        {
            _policyHolderService = policyHolderService;
        }

        public async Task<IActionResult> ManageCustomers()
        {
            var policyHolders = await _policyHolderService.GetPolicyHoldersAsync();
            return View(policyHolders);
        }

        [HttpPut]
        [Route("Customer/UpdateStatus/{id}/{status}")]
        public async Task<IActionResult> UpdateStatus(int id, int status)
        {
            try
            {
                bool success = await _policyHolderService.UpdateStatusAsync(id, status);

                if (success)
                {
                    return Ok();
                }
                else
                {
                    return StatusCode(StatusCodes.Status500InternalServerError, "Failed to update status.");
                }
            }
            catch
            {
                return StatusCode(StatusCodes.Status500InternalServerError, "An error occurred while updating the status.");
            }
        }
    }
}

