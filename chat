using Microsoft.AspNetCore.Mvc;
using System.Threading.Tasks;

namespace WebApplication1.Controllers
{
    public class PolicyRequestController : Controller
    {
        private readonly IPolicyRequestService _policyRequestService;

        // Correct constructor for dependency injection
        public PolicyRequestController(IPolicyRequestService policyRequestService)
        {
            _policyRequestService = policyRequestService;
        }

        public async Task<IActionResult> Review(int insuredPolicyId)
        {
            // Use await to properly retrieve the insured policy asynchronously
            var insuredPolicy = await _policyRequestService.GetInsuredPolicyAsync(insuredPolicyId);

            // Check if the insuredPolicy object is null
            if (insuredPolicy == null)
            {
                // Return NotFound result if no policy is found
                return NotFound("Policy not found.");
            }

            // Use await to properly retrieve the policy holder asynchronously
            var policyHolder = await _policyRequestService.GetPolicyHolderAsync(insuredPolicy.InsuredId);

            // Check if the policyHolder object is null
            if (policyHolder == null)
            {
                return NotFound("Policy holder not found.");
            }

            // Create and return a view model
            var viewModel = new PolicyRequestViewModel
            {
                InsuredPolicyId = insuredPolicy.InsuredPolicyId,
                InsuredId = insuredPolicy.InsuredId,
                PolicyId = insuredPolicy.PolicyId,
                PolicyHolderId = insuredPolicy.PolicyHolderId,
                Name = policyHolder.Name,
                ApprovalStatus = insuredPolicy.ApprovalStatus,
                ApprovalDate = insuredPolicy.ApprovalDate
            };

            return View(viewModel);
        }
    }
}
